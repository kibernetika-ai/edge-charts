apiVersion: apps/v1
kind: Deployment
metadata:
  name: trackheatmap
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: trackheatmap
      vendor: kibernetika
  template:
    metadata:
      labels:
        app: trackheatmap
        vendor: kibernetika
    spec:
      {{- if .Values.runOnVCANode }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: vcac-pool
                    operator: Exists
      {{- end }}
      volumes:
      - configMap:
          defaultMode: 420
          name: streams
        name: kstreams
      {{- if .Values.openness.enabled }}
      - name: certs
        emptyDir: {}
      - name: ca-certrequester
        secret:
          secretName: ca-certrequester
      serviceAccountName: heatmap-producer
      initContainers:
      - name: alpine
        image: alpine:3.12.0
        command: [ "/bin/sh" ]
        args: [ "-c", "cp /root/ca-certrequester/cert.pem /root/certs/root.pem" ]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: "0.1"
          limits:
            cpu: "0.1"
            memory: "128Mi"
        volumeMounts:
          - name: ca-certrequester
            mountPath: /root/ca-certrequester
          - name: certs
            mountPath: /root/certs
      - name: certrequester
        image: certrequester:1.0
        args: [ "--cfg", "/home/certrequester/config/certrequest.json" ]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: "0.1"
          limits:
            cpu: "0.1"
            memory: "128Mi"
        volumeMounts:
          - name: config
            mountPath: /home/certrequester/config/
          - name: certs
            mountPath: /home/certrequester/certs/
      {{- end }}
      containers:
        - name:  edge
          volumeMounts:
          - mountPath: /data.json
            name: kstreams
            subPath: streams.json
          {{- if .Values.openness.enabled }}
          - name: certs
            mountPath: /root/certs/
          {{- end }}
          image: "{{ printf "%s:%s" .Values.Image.Name .Values.Image.Tag }}"
          imagePullPolicy: Always
          command: ["/bin/bash", "-c"]
          args:
          - |
            python /ponchik2/src/generate_streams.py $STREAM_COUNT /ponchik2/templates/data.json && /ponchik2/edge/start.sh
          env:
          {{- if .Values.useHDDL }}
          - name: USE_DEVICE
            value: "HDDL"
          {{- end }}
          {{- if .Values.openness.enabled }}
          - name: OPENNESS_ENABLED
            value: "true"
          {{- if .Values.useIntelGPU }}
          - name: HWACCEL
            value: "yes"
          {{- end }}
          {{- range .Values.env }}
          - name: {{ .name }}
            value: {{ .value | quote }}
          {{- end }}
          resources:
            limits:
              memory: "{{ .Values.resources.limits.memory }}"
              cpu: "{{ .Values.resources.limits.cpu }}"
              {{- if .Values.useHDDL }}
              vpu.intel.com/hddl: "{{ .Values.resources.requests.hddl }}"
              {{- end }}
              {{- if .Values.useIntelGPU }}
              gpu.intel.com/i915: "1"
              {{- end }}
            requests:
              memory: "{{ .Values.resources.requests.memory }}"
              cpu: "{{ .Values.resources.requests.cpu }}"
              {{- if .Values.useHDDL }}
              vpu.intel.com/hddl: "{{ .Values.resources.requests.hddl }}"
              {{- end }}
              {{- if .Values.useIntelGPU }}
              gpu.intel.com/i915: "1"
              {{- end }}
          ports:
          - containerPort: 8000
            protocol: TCP
            name: http
          - containerPort: 1935
            protocol: TCP
            name: rtmp